
// Help from
// https://www.shadertoy.com/view/tdG3Rd

#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D destImage;

layout(set = 1, binding = 0) uniform Global {
  vec4 resolution;
  vec4 time;
} global;

layout(set = 2, binding = 0) uniform Local {
  vec4 text; // vec4(1=print text show use alpha from texture, 0, 0, 0)
  vec4 color;
  vec4 region; // (offset.x, offset.y, scale.x, scale.y)
} local;

float iTime = global.time.x * 0.1;
vec3 iResolution = vec3(global.resolution.xy, 0);

float colormap_red(float x) {
    // Softer red with less variation
    return 0.2 + x * 0.1;
}

float colormap_green(float x) {
    // Reduced green intensity and variation
    return 0.3 + x * 0.3;
}

float colormap_blue(float x) {
    // Minimal blue component
    return 0.1 + x * 0.1;
}

vec4 colormap(float x) {
    return vec4(colormap_red(x), colormap_green(x), colormap_blue(x), 1.0);
}

float mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float permute(float x) { return mod289(((x*34.0)+1.0)*x); }
vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                       -0.577350269189626,  // -1.0 + 2.0 * C.x
                        0.024390243902439); // 1.0 / 41.0
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    
    vec2 i1;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    
    i = mod289(i);
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
                + i.x + vec3(0.0, i1.x, 1.0 ));
    
    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
        dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;
    
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

// Modified Fractal Brownian Motion for richer gradients
float fbm(vec2 p) {
    float f = 0.0;
    mat2 m = mat2(0.80, 0.60, -0.60, 0.80);
    
    // Adjust amplitude and frequency for more varied noise
    f += 0.500000 * (snoise(p + iTime * 0.5) * 0.5 + 0.5);
    p = m * p * 2.02;
    f += 0.250000 * (snoise(p * 1.1) * 0.5 + 0.5);
    p = m * p * 2.03;
    f += 0.125000 * (snoise(p * 1.2) * 0.5 + 0.5);
    p = m * p * 2.01;
    f += 0.062500 * (snoise(p * 1.3) * 0.5 + 0.5);
    
    // Use pow to create more mid-tone emphasis
    f = f / 0.96875;
    return pow(f, 1.5);
}

float pattern(vec2 p) {
    return fbm(p + fbm(p * 0.8));
}

// Simple Pseudo-Random Number Generator
float hash(vec2 p) {
    p = fract(p * vec2(123.45, 678.90));
    p += dot(p, p + 45.6);
    return fract(p.x * p.y);
}

// Converts a color from sRGB gamma to linear light gamma
// https://gamedev.stackexchange.com/questions/92015/optimized-linear-to-srgb-glsl
vec4 to_linear(vec4 sRGB) {
    bvec3 cutoff = lessThan(sRGB.rgb, vec3(0.04045));
    vec3 higher = pow((sRGB.rgb + vec3(0.055))/vec3(1.055), vec3(2.4));
    vec3 lower = sRGB.rgb/vec3(12.92);

    return vec4(mix(higher, lower, cutoff), sRGB.a);
}

vec4 mainImage(in vec2 fragCoord) {    
    vec2 og_uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;
    vec2 uv = fragCoord/iResolution.xy * 0.3;
    
    // Add some subtle scale and offset to create more variation
    float shade = pattern(uv * 3.0 + vec2(0.5, 0.5));

    vec3 norm_color = vec3(local.color.x/255, local.color.y/255, local.color.z/255);
    vec4 color = vec4(norm_color, local.color.w);
    color = to_linear(color);
    vec3 noise_color = vec3(shade * 0.05);
    vec3 final_color = color.xyz + noise_color;

    //vec3 bg_color = colormap(shade).rgb;

    return vec4(final_color, local.color.w);
}

void main() {
    vec2 coord = vec2(gl_GlobalInvocationID.xy);
    ivec2 i_coord = ivec2(gl_GlobalInvocationID.xy);
    vec4 color = mainImage(coord);
    //vec4 color = vec4(1, 0, 0, 1);
    imageStore(destImage, i_coord, color);
}
